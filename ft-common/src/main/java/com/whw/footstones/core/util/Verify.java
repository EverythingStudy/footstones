package com.whw.footstones.core.util;import com.whw.footstones.common.exception.ExceptionEnums;import com.whw.footstones.common.exception.ServiceException;import com.whw.footstones.core.error.DefaultSystemError;import org.springframework.lang.Nullable;/** * @version 1.0 * @description: TODO * @date 2021/9/13 8:16 PM */public final class Verify {    /***     * expression为true时抛出ServiceException异常     * @param expression     */    public static void verify(boolean expression) {        if (expression) {            throw new ServiceException(DefaultSystemError.SERVER_BUSY.getCode(),DefaultSystemError.SERVER_BUSY.getMessage());        }    }    /***     * expression值为true时抛出ServiceException异常     * @param expression     * @param errorCode 业务自定义错误编码     * @param errorMessageTemplate     * @param errorMessageArgs     */    public static void verify(            boolean expression,            Integer errorCode,            @Nullable String errorMessageTemplate,            @Nullable Object... errorMessageArgs) {        if (expression) {            throw new ServiceException(errorCode,format(errorMessageTemplate, errorMessageArgs));        }    }    /***     * expression值为true时抛出ServiceException异常     * @param expression     * @param exceptionEnums     */    public static void verify(boolean expression, ExceptionEnums exceptionEnums) {        if (expression) {            throw new ServiceException(exceptionEnums.getCode(),exceptionEnums.getMessage());        }    }    public static <T> T verifyNotNull(Integer errorCode,@Nullable T reference) {        return verifyNotNull(errorCode,reference, "expected a non-null reference");    }    public static <T> T verifyNotNull(            Integer errorCode,            @Nullable T reference,            @Nullable String errorMessageTemplate,            @Nullable Object... errorMessageArgs) {        verify(reference == null, errorCode,errorMessageTemplate, errorMessageArgs);        return reference;    }    private Verify() {    }    static String format(String template, @Nullable Object... args) {        template = String.valueOf(template); // null -> "null"        // start substituting the arguments into the '%s' placeholders        StringBuilder builder = new StringBuilder(template.length() + 16 * args.length);        int templateStart = 0;        int i = 0;        while (i < args.length) {            int placeholderStart = template.indexOf("%s", templateStart);            if (placeholderStart == -1) {                break;            }            builder.append(template.substring(templateStart, placeholderStart));            builder.append(args[i++]);            templateStart = placeholderStart + 2;        }        builder.append(template.substring(templateStart));        // if we run out of placeholders, append the extra args in square braces        if (i < args.length) {            builder.append(" [");            builder.append(args[i++]);            while (i < args.length) {                builder.append(", ");                builder.append(args[i++]);            }            builder.append(']');        }        return builder.toString();    }    public static void main(String[] args) {        verify(1 == 1,DefaultSystemError.BAD_PARAM);        int a = 1;        verify(1 == 1,100001,"操作错误:%s",a,"出错了","正常的");    }}
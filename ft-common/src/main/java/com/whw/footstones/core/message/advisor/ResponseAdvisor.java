package com.whw.footstones.core.message.advisor;import com.whw.footstones.core.annotation.MockReturn;import com.whw.footstones.core.message.IgnoreMessageType;import com.whw.footstones.core.message.IgnoreOutputMessageType;import com.whw.footstones.core.util.Result;import com.whw.footstones.core.message.converter.FrameJackson2HttpMessageConverter;import com.whw.footstones.core.util.MockUtils;import lombok.Data;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Value;import org.springframework.core.MethodParameter;import org.springframework.http.MediaType;import org.springframework.http.converter.HttpMessageConverter;import org.springframework.http.server.ServerHttpRequest;import org.springframework.http.server.ServerHttpResponse;import org.springframework.web.bind.annotation.ControllerAdvice;import org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice;/** * @author * @version 1.0 * @description: TODO * @date 2021/9/13 7:49 PM */@ControllerAdvice@Datapublic class ResponseAdvisor implements ResponseBodyAdvice<Object> {    private static final Logger logger = LoggerFactory.getLogger(ResponseAdvisor.class);    @Value("${message.output.version:v1}")    private String outputMessageVersion;    /**     * 根据HttpMessageConverter判断是否需要拦截返回体     *     * @param returnType     * @param converterType     * @return     */    @Override    public boolean supports(MethodParameter returnType, Class<? extends HttpMessageConverter<?>> converterType) {        return FrameJackson2HttpMessageConverter.class.isAssignableFrom(converterType);    }    /**     * 封装返回体     *     * @param body     * @param returnType     * @param selectedContentType     * @param selectedConverterType     * @param request     * @param response     * @return     */    @Override    public Object beforeBodyWrite(Object body,                                  MethodParameter returnType,                                  MediaType selectedContentType, Class<? extends HttpMessageConverter<?>> selectedConverterType,                                  ServerHttpRequest request,                                  ServerHttpResponse response) {        if (returnType.getContainingClass() == null                || returnType.getContainingClass().getName().contains("springfox")) {            return body;        }        if (returnType.getDeclaringClass().isAnnotationPresent(IgnoreOutputMessageType.class) || returnType.getDeclaringClass().isAnnotationPresent(IgnoreMessageType.class)) {            return body;        }        //返回值为空且有MockReturn的时候才进行mock        if (body == null && returnType.hasMethodAnnotation(MockReturn.class)) {            body = MockUtils.mock(returnType.getGenericParameterType());            logger.warn("{} is mocking return", request.getURI().getPath());        }        return Result.success(body);    }}
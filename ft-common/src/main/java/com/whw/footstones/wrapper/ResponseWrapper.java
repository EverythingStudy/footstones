package com.whw.footstones.wrapper;import javax.servlet.ServletOutputStream;import javax.servlet.WriteListener;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpServletResponseWrapper;import java.io.*;import java.nio.charset.StandardCharsets;/** * @author cly * @version 1.0 * @description: TODO * @date 2022/1/7 9:59 AM */public class ResponseWrapper extends HttpServletResponseWrapper {    private ByteArrayOutputStream buffer = null;    private ServletOutputStream out = null;    private PrintWriter writer = null;    public ResponseWrapper(HttpServletResponse resp) throws IOException {        super(resp);        this.buffer = new ByteArrayOutputStream();        this.out = new ResponseWrapper.OutputStreamWrapper(this.buffer);        this.writer = new PrintWriter(new OutputStreamWriter(this.buffer, StandardCharsets.UTF_8));    }    @Override    public ServletOutputStream getOutputStream() throws IOException {        return this.out;    }    @Override    public PrintWriter getWriter() throws UnsupportedEncodingException {        return this.writer;    }    @Override    public void flushBuffer() throws IOException {        if (this.out != null) {            this.out.flush();        }        if (this.writer != null) {            this.writer.flush();        }    }    @Override    public void reset() {        this.buffer.reset();    }    public String getResponseData() throws IOException {        this.flushBuffer();        return new String(this.buffer.toByteArray(), StandardCharsets.UTF_8);    }    private static class OutputStreamWrapper extends ServletOutputStream {        private ByteArrayOutputStream bos = null;        public OutputStreamWrapper(ByteArrayOutputStream stream) throws IOException {            this.bos = stream;        }        @Override        public void write(int b) throws IOException {            this.bos.write(b);        }        @Override        public void write(byte[] b) throws IOException {            this.bos.write(b, 0, b.length);        }        @Override        public boolean isReady() {            return false;        }        @Override        public void setWriteListener(WriteListener listener) {        }    }}
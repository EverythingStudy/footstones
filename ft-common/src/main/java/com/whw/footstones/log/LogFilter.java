package com.whw.footstones.log;import com.alibaba.fastjson.JSON;import com.whw.footstones.core.wapper.RequestWrapper;import com.whw.footstones.core.wapper.ResponseWrapper;import com.whw.footstones.util.IPUtil;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.util.AntPathMatcher;import org.springframework.web.filter.OncePerRequestFilter;import javax.servlet.FilterChain;import javax.servlet.ServletException;import javax.servlet.ServletOutputStream;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.util.*;/** * @author cly * @version 1.0 * @description: TODO 日志 * <code>MSC</code> * @date 2022/1/7 9:52 AM */public class LogFilter extends OncePerRequestFilter {    private static final Logger log = LoggerFactory.getLogger(LogFilter.class);    private final ThreadLocal<Long> startTime = new ThreadLocal();    private final AntPathMatcher pathMatcher = new AntPathMatcher();    private final List<String> ignoresUri;    public LogFilter(List<String> ignoresUri) {        this.ignoresUri = ignoresUri;    }    @Override    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {        if (this.ignore(request.getRequestURI())) {            if (log.isDebugEnabled()) {                log.debug("micro logging has ignored uri: '{} {}'", request.getMethod(), request.getRequestURI());            }            filterChain.doFilter(request, response);        } else {            this.startTime.set(System.currentTimeMillis());            this.recordMark();            Map<String, String[]> parameterMap = request.getParameterMap();            RequestWrapper requestWrapper = new RequestWrapper(request);            log.info("REQUEST:'{} {}'; IP:{}; HEADER:{}; \nARGS:{}", new Object[]{request.getMethod(), request.getRequestURI(), IPUtil.getIp(request), this.getRequestHeaderStr(request), requestWrapper.getBodyString()});            ResponseWrapper responseWrapper = new ResponseWrapper(response);            filterChain.doFilter(requestWrapper, responseWrapper);            String result = responseWrapper.getResponseData();            ServletOutputStream outputStream = response.getOutputStream();            outputStream.write(result.getBytes());            outputStream.flush();            outputStream.close();            long costTime = System.currentTimeMillis() - (Long) this.startTime.get();            log.info("RESPONSE:{}; COST_TIME: {}ms", result, costTime);            this.startTime.remove();            this.clearMark();        }    }    private String getRequestHeaderStr(HttpServletRequest request) {        Enumeration<String> headerNames = request.getHeaderNames();        HashMap headerMap = new HashMap();        while (headerNames.hasMoreElements()) {            String headerKey = (String) headerNames.nextElement();            headerMap.put(headerKey, request.getHeader(headerKey));        }        return JSON.toJSONString(headerMap);    }    private void recordMark() {        MDCUtils.put(MDCConstants.REQUEST_SESSION_ID, UUID.randomUUID().toString());    }    private void clearMark() {        MDCUtils.remove(MDCConstants.REQUEST_SESSION_ID);    }    private boolean ignore(String uri) {        Iterator var2 = this.ignoresUri.iterator();        String u;        do {            if (!var2.hasNext()) {                return false;            }            u = (String) var2.next();        } while (!this.pathMatcher.match(u, uri));        return true;    }}
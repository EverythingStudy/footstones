package com.whw.footstones.util;import com.sun.tools.internal.jxc.SchemaGenerator;import lombok.extern.slf4j.Slf4j;import org.openjdk.jmh.annotations.*;import org.openjdk.jmh.infra.Blackhole;import org.openjdk.jmh.results.format.ResultFormatType;import org.openjdk.jmh.runner.options.Options;import org.openjdk.jmh.runner.options.OptionsBuilder;import java.util.concurrent.TimeUnit;/** * @version 1.0 * @description: TODO * @date 2021/11/1 7:50 PM */@BenchmarkMode(Mode.AverageTime)@Warmup(iterations = 3, time = 1)@Measurement(iterations = 5, time = 5)@Threads(4)@Fork(1)@State(value = Scope.Benchmark)@OutputTimeUnit(TimeUnit.NANOSECONDS)@Slf4jpublic class JMHUtil {    @Param(value = {"10", "50", "100"})    private int length;    @Benchmark    public void measureName() {        log.error("eee");        System.out.println("test");    }    @Benchmark    public void testStringAdd(Blackhole blackhole) {        String a = "";        for (int i = 0; i < length; i++) {            a += i;        }        blackhole.consume(a);    }    @Benchmark    public void testStringBuilderAdd(Blackhole blackhole) {        StringBuilder sb = new StringBuilder();        for (int i = 0; i < length; i++) {            sb.append(i);        }        blackhole.consume(sb.toString());    }    public static void main(String[] args) {        Options opt = new OptionsBuilder()                .include(JMHUtil.class.getSimpleName())                .result("result.json")                .resultFormat(ResultFormatType.JSON).build();        //new SchemaGenerator.Runner(opt).run();    }}
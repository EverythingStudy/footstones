package com.whw.footstones.util;import javax.servlet.http.HttpServletRequest;/** * @author cly * @version 1.0 * @description: TODO * @date 2022/1/7 10:00 AM */public class IPUtil {    public IPUtil() {    }    public static String getIp(HttpServletRequest request) {        if (request == null) {            return null;        } else {            String ip = null;            String unknown = "UnknownAddress";            String ipAddresses = request.getHeader("X-Forwarded-For");            if (ipAddresses == null || ipAddresses.length() == 0 || unknown.equalsIgnoreCase(ipAddresses)) {                ipAddresses = request.getHeader("Proxy-Client-IP");            }            if (ipAddresses == null || ipAddresses.length() == 0 || unknown.equalsIgnoreCase(ipAddresses)) {                ipAddresses = request.getHeader("WL-Proxy-Client-IP");            }            if (ipAddresses == null || ipAddresses.length() == 0 || unknown.equalsIgnoreCase(ipAddresses)) {                ipAddresses = request.getHeader("HTTP_CLIENT_IP");            }            if (ipAddresses == null || ipAddresses.length() == 0 || unknown.equalsIgnoreCase(ipAddresses)) {                ipAddresses = request.getHeader("X-Real-IP");            }            if (ipAddresses != null && ipAddresses.length() != 0) {                ip = ipAddresses.split(",")[0];            }            if (ip == null || ip.length() == 0 || unknown.equalsIgnoreCase(ipAddresses)) {                ip = request.getRemoteAddr();            }            return "0:0:0:0:0:0:0:1".equals(ip) ? "127.0.0.1" : ip;        }    }    public static int ip2Int(String ipString) {        String[] ipSlices = ipString.split("\\.");        int rs = 0;        for (int i = 0; i < ipSlices.length; ++i) {            int intSlice = Integer.parseInt(ipSlices[i]) << 8 * i;            rs |= intSlice;        }        return rs;    }    public static String int2Ip(int ipInt) {        String[] ipString = new String[4];        for (int i = 0; i < 4; ++i) {            int pos = i * 8;            int and = ipInt & 255 << pos;            ipString[i] = String.valueOf(and >>> pos);        }        return String.join(".", ipString);    }}
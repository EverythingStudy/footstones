# 定义两个全局数据源spring.shardingsphere.datasource.names=db-0,db-1spring.shardingsphere.sharding.default-data-source-name=db-0# 配置数据源 ds-0spring.shardingsphere.datasource.db-0.type=com.alibaba.druid.pool.DruidDataSourcespring.shardingsphere.datasource.db-0.driverClassName=com.mysql.jdbc.Driverspring.shardingsphere.datasource.db-0.url=jdbc:mysql://127.0.0.1:3306/db-0?useUnicode=true&characterEncoding=utf8&tinyInt1isBit=false&useSSL=false&serverTimezone=GMTspring.shardingsphere.datasource.db-0.username=rootspring.shardingsphere.datasource.db-0.password=123456# 配置数据源 ds-1spring.shardingsphere.datasource.db-1.type=com.alibaba.druid.pool.DruidDataSourcespring.shardingsphere.datasource.db-1.driverClassName=com.mysql.jdbc.Driverspring.shardingsphere.datasource.db-1.url=jdbc:mysql://127.0.0.1:3306/db-1?useUnicode=true&characterEncoding=utf8&tinyInt1isBit=false&useSSL=false&serverTimezone=GMTspring.shardingsphere.datasource.db-1.username=rootspring.shardingsphere.datasource.db-1.password=123456# 配置分片表 t_order# 指定真实数据节点spring.shardingsphere.sharding.tables.t_order.actual-data-nodes=db-$->{0..1}.t_order_$->{0..2}### 分库策略# 分库分片健spring.shardingsphere.sharding.tables.t_order.database-strategy.inline.sharding-column=order_id# 分库分片算法spring.shardingsphere.sharding.tables.t_order.database-strategy.inline.algorithm-expression=db-$->{order_id % 2}# 分表策略# 分表分片健spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.sharding-column=order_id# 分表算法spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.algorithm-expression=t_order_$->{order_id % 3}# 自增主键字段spring.shardingsphere.sharding.tables.t_order.key-generator.column=order_id# 自增主键ID 生成方案spring.shardingsphere.sharding.tables.t_order.key-generator.type=SNOWFLAKE# 绑定表关系spring.shardingsphere.sharding.binding-tables=t_order,t_order_item# 配置广播表spring.shardingsphere.sharding.broadcast-tables=t_config# 是否开启 SQL解析日志spring.shardingsphere.props.sql.show=true
package com.whw.footstones.interceptor;import com.alibaba.fastjson.JSONObject;import com.alibaba.fastjson.serializer.SerializerFeature;import lombok.extern.slf4j.Slf4j;import org.apache.commons.lang3.ArrayUtils;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Component;import org.springframework.web.servlet.AsyncHandlerInterceptor;import org.springframework.web.servlet.ModelAndView;import javax.servlet.http.Cookie;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;/** * @version 1.0 * @description: TODO * @date 2021/9/29 7:38 PM */@Slf4j@Componentpublic class AuthSSOInterceptor implements AsyncHandlerInterceptor {//    @Autowired//    private SsoServiceClient ssoServiceClient;////    @Autowired//    private AuthServiceClient authServiceClient;    @Value("${allow.cross.domain:test}")    private String crossDomain;    @Value("${spring.profiles.active:test}")    private String env;    @Override    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {//        String accessToken = getAccessToken(request, response);//        if (StringUtils.isBlank(accessToken)) {//            log.warn("accessToken can not be null");//            Verify.verify(true, AuthErrorEnum.UN_LOGIN);//            return false;//        }////        UserVo userVo = auth(accessToken, response);//        if (userVo == null) {//            log.error("fail to obtain sso user");//            return false;//        }//        new AuthContext.AuthContextBuild().currUser(userVo.getGlobalUser())//                .currUserToken(userVo.getAccessToken())//                .globalUserId(userVo.getGlobalUser().getId()).bulid();//        return apiCheck(request, response, AuthContext.getCurrentUserToken(), userVo.getGlobalUser().getId());        return true;    }//    private UserVo auth(String accessToken, HttpServletResponse response) {//        try {//            OutputMessage<UserVo> userVo = ssoServiceClient.loginCheck(accessToken);//            Verify.verify(Objects.isNull(userVo), AuthErrorEnum.INVOKE_AUTH_ERROR);//            Verify.verify(userVo.getCode() != 0, userVo.getCode(), userVo.getMessage());////            return userVo.getData();//        } catch (Exception e) {//            resloveExceptionAndThenThrow(e);//            log.error("invoke error when check api: {}", e.getMessage());//        }//        return null;//    }    /**     * api校验     *     * @param request     * @param response     */    private boolean apiCheck(HttpServletRequest request, HttpServletResponse response, String accessToken, Long userId) {//        try {//            String apiPath = request.getContextPath() + request.getServletPath();//            log.info("apiPath===" + apiPath);////            ApiAuthRequest req = new ApiAuthRequest();//            req.setId(userId);//            req.setApiPath(apiPath);////            long startTime = System.currentTimeMillis();//            log.info("api鉴权begin:{}", startTime);////            InputMessage<ApiAuthRequest> im = InputMessage.params(req);//            OutputMessage<ApiAuthVo> apiCheckResult = authServiceClient.authApi(im, accessToken);////            log.info("apiCheckResult:{}", JSON.toJSONString(apiCheckResult));//            log.info("api鉴权end:{} ms", (System.currentTimeMillis() - startTime));////            Verify.verify((apiCheckResult.getCode() != 0), AuthErrorEnum.INVOKE_AUTH_ERROR);//            Verify.verify((apiCheckResult.getData().getPass() != ApiAuthVo.PASS_TRUE), AuthErrorEnum.CHECK_FAIL);//        } catch (Exception e) {//            resloveExceptionAndThenThrow(e);//            log.error("invoke error when check api: {}", e.getMessage());//            return false;//        }        return true;    }    @Override    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {        // AuthContext.clean();    }    @Override    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {        //AuthContext.clean();    }    /***     * 获取access_token     * @param request     * @return     *///    private String getAccessToken(HttpServletRequest request, HttpServletResponse response) {//        //兼容web浏览器登录不同环境使用//        String accessTokenKey = StringUtils.isNotBlank(env) ? StringUtils.join(env, "_", AuthConstant.ACCESS_TOKEN) : AuthConstant.ACCESS_TOKEN;//        if (StringUtils.isNotEmpty(StringUtils.defaultIfBlank(request.getHeader(accessTokenKey), request.getHeader(AuthConstant.ACCESS_TOKEN)))) {//            return StringUtils.defaultIfBlank(request.getHeader(accessTokenKey), request.getHeader(AuthConstant.ACCESS_TOKEN));//        }//        Cookie[] cookies = request.getCookies();//        if (ArrayUtils.isEmpty(cookies)) {//            return null;//        }//        for (Cookie cookie : cookies) {//            if (accessTokenKey.equals(cookie.getName()) || AuthConstant.ACCESS_TOKEN.equals(cookie.getName())) {//                return cookie.getValue();//            }//        }//        return null;//    }    /***     *     * @param e     *///    private void resloveExceptionAndThenThrow(Exception e) {//        ExceptionEnums exceptionEnums = AuthErrorEnum.INVOKE_AUTH_ERROR;//        if (e instanceof ServiceException) {//            exceptionEnums = ((ServiceException) e).getExceptionEnums();//        }//        if (e instanceof ThirdServiceException) {//            exceptionEnums = ((ThirdServiceException) e).getExceptionEnums();//        }//        throw new ServiceException(exceptionEnums);//    }//    private void responseError(HttpServletResponse response, ExceptionEnums error) {//        response.setHeader("Content-Type", "application/json;charset=UTF-8");//        response.setHeader("Access-Control-Allow-Credentials", "true");//        response.setHeader("Access-Control-Allow-Origin", crossDomain);//        response.setHeader("Access-Control-Expose-Headers", "access-control-allow-headers, access-control-allow-methods, access-control-allow-origin, access-control-max-age, X-Frame-Options");//        try {//            response.getOutputStream().write(JSONObject.toJSONString(OutputMessage.error(error), SerializerFeature.WRITE_MAP_NULL_FEATURES, SerializerFeature.QuoteFieldNames).getBytes());//        } catch (IOException e) {//        }//    }}
package com.whw.footstones.config;import com.whw.footstones.common.exception.ExceptionEnums;import com.whw.footstones.common.exception.ServiceException;import com.whw.footstones.core.message.Result;import lombok.extern.slf4j.Slf4j;import org.springframework.http.HttpStatus;import org.springframework.validation.BindingResult;import org.springframework.web.bind.annotation.*;import javax.servlet.http.HttpServletRequest;import java.net.BindException;/** * @author * @version 1.0 * @description: TODO 全局异常处理 * @date 2021/9/13 3:20 PM */@Slf4j@ControllerAdvice(annotations = {RestController.class})public class GlobalExceptionHandler {    private static final int ERROR_CODE = 1;    @ResponseBody    @ResponseStatus(HttpStatus.OK)    @ExceptionHandler(value = ServiceException.class)    public Result serviceExceptionHandler(HttpServletRequest request, ServiceException e) {        log.error("Failed to process the request, uri = {}", request.getRequestURI());        log.error(e.getMessage(), e);        ExceptionEnums enums = e.getExceptionEnums();        return Result.fail(enums.getCode(), enums.getMessage());    }    @ResponseBody    @ResponseStatus(HttpStatus.OK)    @ExceptionHandler(value = RuntimeException.class)    public Result runtimeExceptionHandler(HttpServletRequest request, RuntimeException e) {        //打印异常信息        log.error("Failed to process the request, uri = {}", request.getRequestURI());        log.error(e.getMessage(), e);        String msg = (e.getMessage() == null || e.getMessage().length() > 80) ? "操作失败,请稍后重试" : e.getMessage();        return Result.fail(ERROR_CODE, msg);    }    @ResponseBody    @ResponseStatus(HttpStatus.OK)    @ExceptionHandler(value = BindException.class)    public Result bindExceptionHandler(HttpServletRequest request, BindingResult e) {        log.error("Failed to process the request, uri = {}", request.getRequestURI());        StringBuffer sb = new StringBuffer();        e.getFieldErrors().forEach(fieldError ->                sb.append(fieldError.getField()).append("=").append(fieldError.getDefaultMessage()).append(";"));        return Result.fail(ERROR_CODE, sb.toString());    }}
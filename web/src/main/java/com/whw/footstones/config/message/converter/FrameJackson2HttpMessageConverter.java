package com.whw.footstones.config.message.converter;import com.fasterxml.jackson.databind.JavaType;import com.fasterxml.jackson.databind.ObjectMapper;import com.fasterxml.jackson.databind.type.TypeFactory;import com.whw.footstones.core.message.IgnoreInputMessageType;import com.whw.footstones.core.message.IgnoreMessageType;import com.whw.footstones.core.message.InputMessage;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.http.HttpInputMessage;import org.springframework.http.client.ClientHttpResponse;import org.springframework.http.converter.HttpMessageNotReadableException;import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;import java.io.IOException;import java.lang.reflect.ParameterizedType;import java.lang.reflect.Type;/** * @author * @version 1.0 * @desc 框架层处理params&自动转驼峰 * @description: TODO * @date 2021/9/13 7:52 PM */public class FrameJackson2HttpMessageConverter extends MappingJackson2HttpMessageConverter {    private static final Logger logger = LoggerFactory.getLogger(FrameJackson2HttpMessageConverter.class);    private boolean isInputMessage;    public FrameJackson2HttpMessageConverter(boolean isInputMessage, ObjectMapper objectMapper) {        super(objectMapper);        this.isInputMessage = isInputMessage;    }    @Override    public Object read(Type type, Class<?> contextClass, HttpInputMessage inputMessage) throws IOException, HttpMessageNotReadableException {        //response 和不做特殊处理        if (inputMessage instanceof ClientHttpResponse) {            return super.read(type, contextClass, inputMessage);        }        //已经包装的        if ((type instanceof ParameterizedType) && ((ParameterizedType) type).getRawType() == InputMessage.class) {            return super.read(type, contextClass, inputMessage);        }        //需要跳过        if (contextClass.isAnnotationPresent(IgnoreInputMessageType.class) || contextClass.isAnnotationPresent(IgnoreMessageType.class)) {            return super.read(type, contextClass, inputMessage);        }        if (isInputMessage) {            JavaType javaType = TypeFactory.defaultInstance().constructParametricType(InputMessage.class, TypeFactory.defaultInstance().constructType(type));            InputMessage inputMessageObj = getObjectMapper().readValue(inputMessage.getBody(), javaType);            return inputMessageObj.getParams();        }        return super.read(type, contextClass, inputMessage);    }}
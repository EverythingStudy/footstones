package com.whw.footstones.config;import com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter;import com.whw.footstones.log.LogFilter;import org.springframework.beans.factory.annotation.Value;import org.springframework.boot.web.servlet.FilterRegistrationBean;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.http.MediaType;import org.springframework.http.converter.HttpMessageConverter;import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;import org.springframework.web.servlet.config.annotation.EnableWebMvc;import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;import java.nio.charset.Charset;import java.nio.charset.StandardCharsets;import java.util.ArrayList;import java.util.Collections;import java.util.List;/** * @author cly * @version 1.0 * @description: TODO * @date 10/24/23 2:02 PM */@Configurationpublic class WebConfig implements WebMvcConfigurer {    /**     * 自定义过滤请求参数，设置MediaType     *///    @Bean(name = "myRequestMappingHandlerAdapter")//    public RequestMappingHandlerAdapter requestMappingHandlerAdapter() {//        RequestMappingHandlerAdapter adapter = new RequestMappingHandlerAdapter();////        List<HttpMessageConverter<?>> converters = adapter.getMessageConverters();////        MappingJackson2HttpMessageConverter jsonConverter = new MappingJackson2HttpMessageConverter();//        List<MediaType> supportedMediaTypes = new ArrayList<MediaType>();//        MediaType textMedia = new MediaType(MediaType.TEXT_PLAIN, Charset.forName("UTF-8"));//        supportedMediaTypes.add(textMedia);//        MediaType jsonMedia = new MediaType(MediaType.APPLICATION_JSON, Charset.forName("UTF-8"));//        supportedMediaTypes.add(jsonMedia);//        jsonConverter.setSupportedMediaTypes(supportedMediaTypes);//        converters.add(jsonConverter);//        adapter.setMessageConverters(converters);//        return adapter;//    }    @Value("${micro.logging.api.ignore:/*/actuator/health}")    private List<String> ignoresUri;    @Bean    public FilterRegistrationBean logFilterRegistrationBean() {        FilterRegistrationBean registration = new FilterRegistrationBean();        registration.setFilter(new LogFilter(ignoresUri));        registration.addUrlPatterns("/*");        registration.setName("logFilter");        registration.setOrder(1);        return registration;    }}
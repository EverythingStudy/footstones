package com.whw.footstones.controller;import com.whw.footstones.config.redis.RedisService;import com.whw.footstones.core.message.OutputMessage;import com.whw.footstones.entity.TRedisOrderEntity;import com.whw.footstones.entity.TRedisRepertoryEntity;import com.whw.footstones.service.TRedisOrderService;import com.whw.footstones.service.TRedisRepertoryService;import com.whw.footstones.util.RedisLockUtil;import io.swagger.annotations.Api;import io.swagger.annotations.ApiOperation;import lombok.extern.slf4j.Slf4j;import org.redisson.api.RLock;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RestController;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.util.concurrent.atomic.AtomicInteger;/** * @author * @version 1.0 * @description: TODO * @date 2021/9/15 7:32 PM */@RestController@Slf4j@Api(tags = {"redis"})public class RedisController {    private volatile AtomicInteger integer = new AtomicInteger(0);    @Autowired    RedisService redisService;    @Autowired    TRedisOrderService tRedisOrderService;    @Autowired    TRedisRepertoryService tRedisRepertoryService;    @Autowired    RedisLockUtil redisLockUtil;    @GetMapping(value = "/getString")    @ApiOperation(value = "测试redis", tags = "redis")    public OutputMessage<String> setRedis() {        redisService.set("test", "key");        return OutputMessage.success("suc");    }    @GetMapping(value = "/order")    @ApiOperation(value = "测试redis分布式锁", tags = "redis")    public String redisLock(HttpServletRequest request, HttpServletResponse response) {        RLock lock = redisLockUtil.lock("redis_1");        //1.创建订单        try {            TRedisOrderEntity tRedisOrderEntity = new TRedisOrderEntity();            tRedisOrderEntity.setOrderNum(String.valueOf(integer.getAndIncrement()));            //2.减库存            TRedisRepertoryEntity tRedisRepertoryEntity = tRedisRepertoryService.selectById(Long.valueOf(2));            if (Integer.valueOf(tRedisRepertoryEntity.getRepertoryNum()) == 0) {                return "卖完了";            }            tRedisRepertoryEntity.setRepertoryNum(String.valueOf(Integer.valueOf(tRedisRepertoryEntity.getRepertoryNum()) - 1));            tRedisRepertoryService.update(tRedisRepertoryEntity);            tRedisOrderService.save(tRedisOrderEntity);        }catch (Exception e){           redisLockUtil.unlock("redis_1");        }finally {            redisLockUtil.unlock("redis_1");        }        return "success";    }}
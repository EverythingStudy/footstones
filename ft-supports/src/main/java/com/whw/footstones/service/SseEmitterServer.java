package com.whw.footstones.service;import lombok.extern.slf4j.Slf4j;import org.springframework.http.MediaType;import org.springframework.web.servlet.mvc.method.annotation.SseEmitter;import java.io.IOException;import java.util.ArrayList;import java.util.List;import java.util.Map;import java.util.Set;import java.util.concurrent.ConcurrentHashMap;import java.util.concurrent.atomic.AtomicInteger;import java.util.function.Consumer;/** * @author cly * @version 1.0 * @description: TODO SSE(Server-Sent Events) 长链接 * @date 10/24/23 3:53 PM */@Slf4jpublic class SseEmitterServer {    /**     * 当前连接数     */    private static AtomicInteger count = new AtomicInteger(0);    private static Map<Integer, SseEmitter> sseEmitterMap = new ConcurrentHashMap<>();    public static SseEmitter connect(Integer userId) {        // 设置超时日期，0表示不过期 1000L是1秒过期        SseEmitter sseEmitter = new SseEmitter(1000L);        // 注册回调        sseEmitter.onCompletion(completionCallBack(userId));        sseEmitter.onError(errorCallBack(userId));        sseEmitter.onTimeout(timeoutCallBack(userId));        sseEmitterMap.put(userId, sseEmitter);        count.getAndIncrement();        log.info("创建新SSE连接，连接用户编号:{}", userId);        log.info("现有连接用户：" + sseEmitterMap.keySet());        return sseEmitter;    }    /**     * 给指定用户发信息     */    public static void sendMessage(Integer userId, String message) {        if (!sseEmitterMap.containsKey(userId)) {            connect(userId);        }        try {            sseEmitterMap.get(userId).send(message);            log.info("给" + userId + "号发送消息：" + message);        } catch (IOException e) {            log.error("userId:{},发送信息出错:{}", userId, e.getMessage());            e.printStackTrace();        }    }    /**     * 群发消息     */    public static void batchSendMessage(String message) {        if (sseEmitterMap != null && !sseEmitterMap.isEmpty()) {            sseEmitterMap.forEach((k, v) -> {                try {                    v.send(message, MediaType.APPLICATION_JSON);                } catch (IOException e) {                    log.error("userId:{},发送信息出错:{}", k, e.getMessage());                    e.printStackTrace();                }            });        }    }    public static void batchSendMessage(Set<Integer> userIds, String message) {        userIds.forEach(userId -> sendMessage(userId, message));    }    /**     * 移出用户     */    public static void removeUser(Integer userId) {        sseEmitterMap.remove(userId);        count.getAndDecrement();        log.info("remove user id:{}", userId);        log.info("remain user id:" + sseEmitterMap.keySet());    }    public static List<Integer> getIds() {        return new ArrayList<>(sseEmitterMap.keySet());    }    public static int getUserCount() {        return count.intValue();    }    private static Runnable completionCallBack(Integer userId) {        return () -> {            log.info("结束连接,{}", userId);            removeUser(userId);        };    }    private static Runnable timeoutCallBack(Integer userId) {        return () -> {            log.info("连接超时,{}", userId);            removeUser(userId);        };    }    private static Consumer<Throwable> errorCallBack(Integer userId) {        return throwable -> {            log.error("连接异常,{}", userId);            removeUser(userId);        };    }}